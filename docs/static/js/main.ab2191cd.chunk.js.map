{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["headers","Accept","Content-type","App","react_default","a","createElement","className","App_MyDropzone","Component","MyDropzone","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","arrayBuffer","mammoth","extractRawText","text","value","axios","url","method","console","log","setState","acceptedFiles","_this2","reader","FileReader","readAsArrayBuffer","onload","_ref3","target","result","onFileRead","_this3","onData","react_json_tree_lib_default","theme","invertTheme","hideRoot","JSON","stringify","es","onDrop","getDocData","_ref4","getRootProps","getInputProps","scheme","author","base00","base01","base02","base03","base04","base05","base06","base07","base08","base09","base0A","base0B","base0C","base0D","base0E","base0F","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oZAQMA,EAAU,CACdC,OAAQ,mBACRC,eAAgB,cAgBHC,mLAXX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,6BACAF,EAAAC,EAAAC,cAACE,EAAD,eANQC,aAeZC,cAEJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,KAAM,MAFHR,kHAKFS,+FACeC,IAAQC,eAAe,CAAEF,uCAAxCG,IAAPC,eACeC,IAAM,CAC3B1B,UACA2B,IAhCG,uCAiCHC,OAAQ,OACRR,KAAMI,oBAJAJ,SAORS,QAAQC,IAAIV,GACZL,KAAKgB,SAAS,CAACX,gJAGNY,GAAe,IAAAC,EAAAlB,KAClBmB,EAAS,IAAIC,WACnBD,EAAOE,kBAAkBJ,EAAc,IACvCE,EAAOG,OAAS,SAAAC,GAAyC,IAApBjB,EAAoBiB,EAAtCC,OAAUC,OAC3BP,EAAKQ,WAAWpB,qCAIX,IAAAqB,EAAA3B,KACAK,EAAQL,KAAKI,MAAbC,KACDuB,EACJvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAAvC,EAAD,CAAUe,KAAMA,EAAMyB,MAAOA,EAAOC,aAAa,EAAOC,UAAU,IAClE3C,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,YAAUC,UAAU,eAAeyC,KAAKC,UAAU7B,EAAM,KAAM,KAElE,OACEhB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4C,EAAA,EAAD,CAAUC,OAAQ,SAAAnB,GAAa,OAAIU,EAAKU,WAAWpB,KAChD,SAAAqB,GAAA,IAAGC,EAAHD,EAAGC,aAAcC,EAAjBF,EAAiBE,cAAjB,OACCnD,EAAAC,EAAAC,cAAA,eACEF,EAAAC,EAAAC,cAAA,MAASgD,IACPlD,EAAAC,EAAAC,cAAA,QAAWiD,KACXnD,EAAAC,EAAAC,cAAA,wEAKRF,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,6BACCc,GAAQuB,WAlDMlC,aAyDnBoC,EAAQ,CACZW,OAAQ,UACRC,OAAQ,0CACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,UACRC,OAAQ,WC3FUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5E,EAAAC,EAAAC,cAAC2E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ab2191cd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Dropzone from 'react-dropzone'\r\nimport mammoth from 'mammoth'\r\nimport axios from 'axios'\r\nimport './App.css'\r\nimport JSONTree from 'react-json-tree'\r\n\r\nconst url = `http://wit.istc.cnr.it:9090/enhancer`\r\nconst headers = {\r\n  Accept: 'application/json',\r\n  'Content-type': 'text/plain',\r\n}\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className='App'>\r\n        <div className='App-body'>\r\n          <h1>Wrapped stanbol</h1>\r\n          <MyDropzone />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n\r\nclass MyDropzone extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {data: null}\r\n  }\r\n\r\n  async onFileRead(arrayBuffer) {\r\n    const { value: text } = await mammoth.extractRawText({ arrayBuffer })\r\n    const { data } = await axios({\r\n      headers,\r\n      url,\r\n      method: 'post',\r\n      data: text,\r\n    })\r\n\r\n    console.log(data)\r\n    this.setState({data})\r\n  }\r\n\r\n  getDocData(acceptedFiles) {\r\n    const reader = new FileReader();\r\n    reader.readAsArrayBuffer(acceptedFiles[0]);\r\n    reader.onload = ({ target: { result: arrayBuffer } }) => {\r\n      this.onFileRead(arrayBuffer)\r\n    } \r\n  }\r\n\r\n  render() {\r\n    const {data} = this.state\r\n    const onData = (\r\n      <div>\r\n        <JSONTree data={data} theme={theme} invertTheme={false} hideRoot={true}/>\r\n        <h3>Raw output: </h3>\r\n        <textarea className='rawDataArea'>{JSON.stringify(data, null, 2)}</textarea>\r\n      </div>)\r\n    return (\r\n      <div>\r\n        <Dropzone onDrop={acceptedFiles => this.getDocData(acceptedFiles)}>\r\n          {({ getRootProps, getInputProps }) => (\r\n            <section>\r\n              <div {...getRootProps()}>\r\n                <input {...getInputProps()} />\r\n                <p>Drag 'n' drop docx file here, or click to select a file</p>\r\n              </div>\r\n            </section>\r\n          )}\r\n        </Dropzone>\r\n        <div>\r\n          <h2>Enhanced data: </h2>\r\n          {data && onData}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst theme = {\r\n  scheme: 'monokai',\r\n  author: 'wimer hazenberg (http://www.monokai.nl)',\r\n  base00: '#272822',\r\n  base01: '#383830',\r\n  base02: '#49483e',\r\n  base03: '#75715e',\r\n  base04: '#a59f85',\r\n  base05: '#f8f8f2',\r\n  base06: '#f5f4f1',\r\n  base07: '#f9f8f5',\r\n  base08: '#f92672',\r\n  base09: '#fd971f',\r\n  base0A: '#f4bf75',\r\n  base0B: '#a6e22e',\r\n  base0C: '#a1efe4',\r\n  base0D: '#66d9ef',\r\n  base0E: '#ae81ff',\r\n  base0F: '#cc6633'\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}